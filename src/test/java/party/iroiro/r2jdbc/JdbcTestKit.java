/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package party.iroiro.r2jdbc;

import io.r2dbc.spi.ConnectionFactories;
import io.r2dbc.spi.ConnectionFactory;
import io.r2dbc.spi.ConnectionFactoryOptions;
import io.r2dbc.spi.test.TestKit;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.RegisterExtension;
import org.springframework.jdbc.core.JdbcOperations;
import party.iroiro.r2jdbc.util.JdbcServerExtension;

import static io.r2dbc.spi.ConnectionFactoryOptions.DRIVER;
import static party.iroiro.r2jdbc.JdbcConnectionFactoryProvider.URL;

public class JdbcTestKit implements TestKit<Integer> {
    @RegisterExtension
    static final JdbcServerExtension SERVER = new JdbcServerExtension();

    private final ConnectionFactory connectionFactory = ConnectionFactories
            .get(ConnectionFactoryOptions.builder()
                    .option(DRIVER, JdbcConnectionFactoryMetadata.DRIVER_NAME)
                    .option(URL, SERVER.getUrl())
                    .build());

    @Override
    public ConnectionFactory getConnectionFactory() {
        return connectionFactory;
    }

    @Override
    public String getPlaceholder(int index) {
        return "?";
    }

    @Override
    public Integer getIdentifier(int index) {
        return index;
    }

    @Override
    public JdbcOperations getJdbcOperations() {
        return SERVER.getJdbcOperations();
    }

    @Override
    @Disabled
    public void savePoint() {
        TestKit.super.savePoint();
    }

    @Override
    @Disabled
    public void savePointStartsTransaction() {
        TestKit.super.savePointStartsTransaction();
    }

    @Test
    @Override
    public void prepareStatementWithIncompleteBindingFails() {
        // H2 -> Figure out how to perform bind validations that are normally done during execution phase.
        // TODO: Discuss with R2DBC-SPI devs, I do not suppose such a test / functionality is reasonable
    }

    @Test
    @Override
    public void prepareStatementWithIncompleteBatchFails() {
        // H2 -> Figure out how to perform bind validations that are normally done during execution phase.
        // TODO: Discuss with R2DBC-SPI devs, I do not suppose such a test / functionality is reasonable
    }


    @Test
    @Override
    public void compoundStatement() {
        // Well, JDBC does not seem to support this
    }

    @Override
    public String doGetSql(TestStatement statement) {
        String s = TestKit.super.doGetSql(statement);
        switch (statement) {
            case CREATE_TABLE_AUTOGENERATED_KEY:
                return s.replace("IDENTITY", "GENERATED ALWAYS AS IDENTITY");
            case INSERT_VALUE_AUTOGENERATED_KEY:
                return s.replace("VALUES", "(test_value) VALUES");
            case SELECT_VALUE_ALIASED_COLUMNS:
                return "SELECT col1 AS \"b\", col1 AS \"c\", col1 AS \"a\" FROM test_two_column";
            default:
                return s;
        }
    }
}
